//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DoAn.Models
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.ComponentModel.DataAnnotations.Schema;
    using System.Linq;

    public partial class Cart
    {
        List<CartItem> items = new List<CartItem>();

        [Key]
        public int IdCart { get; set; }
        [ForeignKey("Id_Account")]
        public Nullable<int> Id_Account { get; set; }
        public string Name_Pro { get; set; }
        [ForeignKey("Id_Pro")]
        public Nullable<int> Id_Pro { get; set; }
        public Nullable<decimal> Tax { get; set; }
        public Nullable<decimal> Total { get; set; }

        public IEnumerable<CartItem> Items { get { return items; } }

        public virtual Account Account { get; set; }
        public virtual Product Product { get; set; }
        public void Add_Product_Cart(Product _pro, int _quan = 1)
        {
            var item = items.FirstOrDefault(s => s._product.Id == _pro.Id);
            if (item == null)
                items.Add(new CartItem()
                {
                    _product = _pro,
                    _quantity = _quan

                });
            else
                item._quantity += _quan;
        }
        public int Total_quantity()
        {
            return items.Sum(s => s._quantity);
        }
        public decimal Total_money()
        {
            var total = items.Sum(s => s._quantity * s._product.Price);
            if (total >= 0)
            {
                return (decimal)total;
            }
            else { return 0; }
        }
        public void Update_quantity(int id, int _new_quan)
        {
            if (_new_quan < 0)
                return;
            var item = items.Find(s => s._product.Id == id);
            if (item != null)
                item._quantity = _new_quan;
        }

        public void Remove_CartItem(int id)
        {
            items.RemoveAll(s => s._product.Id == id);
        }
        public void ClearCart()
        {
            items.Clear();
        }
    }
    public class CartItem
    {
        public Product _product { get; set; }
        public int _quantity { get; set; }
    }
}

